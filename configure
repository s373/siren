#!/bin/sh

# Copyright (c) 2011, 2012 Tim van der Molen <tbvdm@xs4all.nl>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# $1: function name
# $2: statements
# $3: headers
# $4: macros
# $5: compiler options
check_function()
{
	print_check "for $1()"

	if compile "$4" "$3" "$2" "$5"; then
		print_result yes
		return 0
	else
		print_result no
		return 1
	fi
}

# $1: header
# $2: headers to include first
check_header()
{
	print_check "for <$1>"

	if compile "" "$2 $1"; then
		print_result yes
		return 0
	else
		print_result no
		return 1
	fi
}

check_library()
{
	print_check "for lib$1"

	if compile "" "" "" -l$1; then
		print_result yes
		return 0
	else
		print_result no
		return 1
	fi
}

check_pkgconfig()
{
	print_check "for package $1"

	if run_command pkg-config $1; then
		print_result yes
		return 0
	else
		print_result no
		return 1
	fi
}

# $1: value of $enable_$2
# $2: plug-in name
# $3: plug-in type (either "ip" or "op")
# $4: packages to check for
check_plugin_pkgconfig()
{
	local pkg

	[ "$1" = no ] && return 1

	for pkg in $4; do
		check_pkgconfig $pkg || return 1
	done

	if [ "$3" = ip ]; then
		enabled_ips="$enabled_ips $2"
		makefile_append IP $2
	else
		enabled_ops="$enabled_ops $2"
		makefile_append OP $2
	fi

	makefile_assign CPPFLAGS_$2 "$(pkg-config --cflags $4)"
	makefile_assign LDFLAGS_$2 "$(pkg-config --libs $4)"

	return 0
}

check_program()
{
	local found oifs path

	print_check "for $1"

	echo "searching for $1 in \$PATH" >> $logfile

	found=0
	oifs=$IFS
	IFS=:
	for path in $PATH; do
		if [ -x "$path/$1" ]; then
			found=1
			break
		fi
	done
	IFS=$oifs

	if [ $found -eq 1 ]; then
		echo "found $path/$1" >> $logfile
		print_result yes
	else
		print_result no
		error "cannot find program $1"
	fi
}

# $1: macros
# $2: headers
# $3: statements
# $4: compiler options
compile()
{
	local header macro outfile result srcfile

	outfile=configure-test.o
	srcfile=configure-test.c

	rm -f $srcfile

	for macro in $1; do
		echo "#define $macro" >> $srcfile
	done

	for header in $2; do
		echo "#include <$header>" >> $srcfile
	done

	echo "int main(void) { $3; return 0; }" >> $srcfile

	echo compiling test program: >> $logfile
	while read -r line; do
		echo "\t$line" >> $logfile
	done < $srcfile

	run_command $CC $CFLAGS $CPPFLAGS -o $outfile $srcfile $LDFLAGS $4
	result=$?

	rm -f $outfile $srcfile
	return $result
}

error()
{
	echo "${0##*/}: $@" >& 2
	echo "\nerror: $@" >> $logfile
	exit 1
}

# $1: the name of the variable to save the value to
# $2: the "option=value" string
get_option_value()
{
	local option value

	option="${2%%=*}"
	value="${2#*=}"

	if [ "$value" = yes -o "$value" = no ]; then
		eval $1=$value
	else
		error "option $option: $value: invalid value"
	fi
}

header_define()
{
	echo "#define $@" >> $header
}

makefile_append()
{
	[ "$2" ] && echo "$1+=$2" >> $makefile
}

makefile_assign()
{
	echo "$1=$2" >> $makefile
}

print_check()
{
	echo -n "checking $@..."
	echo "\nchecking $@" >> $logfile
}

print_result()
{
	echo " $@"
	echo "result: $@" >> $logfile
}

run_command()
{
	local status

	echo "running command: $@" >> $logfile
	eval $@ >> $logfile 2>& 1
	status=$?
	echo "exit status: $status" >> $logfile
	return $status
}

logfile=configure.log
header=config.h
makefile=config.mk

prefix=/usr/local
bindir_suffix=bin
mandir_suffix=man
plugindir_suffix=lib/siren

enable_debug=no
enable_flac=yes
enable_mad=yes
enable_sndfile=yes
enable_vorbis=yes
enable_wavpack=yes
enable_ao=yes
enable_oss=yes
enable_pulse=yes
enable_sndio=yes
enable_sun=yes

while [ $# -gt 0 ]; do
	case "$1" in
	prefix=*)
		prefix="${1#*=}"
		;;
	bindir=*)
		bindir="${1#*=}"
		;;
	mandir=*)
		mandir="${1#*=}"
		;;
	plugindir=*)
		plugindir="${1#*=}"
		;;
	debug=*)
		get_option_value enable_debug "$1"
		;;
	flac=*)
		get_option_value enable_flac "$1"
		;;
	mad=*)
		get_option_value enable_mad "$1"
		;;
	sndfile=*)
		get_option_value enable_sndfile "$1"
		;;
	vorbis=*)
		get_option_value enable_vorbis "$1"
		;;
	wavpack=*)
		get_option_value enable_wavpack "$1"
		;;
	ao=*)
		get_option_value enable_ao "$1"
		;;
	oss=*)
		get_option_value enable_oss "$1"
		;;
	pulse=*)
		get_option_value enable_pulse "$1"
		;;
	sndio=*)
		get_option_value enable_sndio "$1"
		;;
	sun=*)
		get_option_value enable_sun "$1"
		;;
	help|-h|--help)
		error "see the INSTALL file for more information"
		;;
	*)
		error "${1%%=*}: invalid option"
		;;
	esac
	shift
done

rm -f $logfile $header $makefile

if [ -z "$CC" ]; then
	CC=cc
else
	makefile_assign CC "$CC"
fi

makefile_assign CFLAGS "$CFLAGS"
makefile_assign CPPFLAGS "$CPPFLAGS"
makefile_assign LDFLAGS "$LDFLAGS"

[ -z "$bindir" ] && bindir="$prefix/$bindir_suffix"
[ -z "$mandir" ] && mandir="$prefix/$mandir_suffix"
[ -z "$plugindir" ] && plugindir="$prefix/$plugindir_suffix"
makefile_assign BINDIR "$bindir"
makefile_assign MANDIR "$mandir"
makefile_assign PLUGINDIR "$plugindir"
header_define PLUGIN_DIR "\"$plugindir\""

if [ "$enable_debug" = yes ]; then
	header_define DEBUG
	makefile_append CFLAGS -ggdb
fi

uname -srvm >> $logfile

check_program "$CC"
check_program pkg-config

if check_function asprintf 'asprintf(NULL, "")' stdio.h _GNU_SOURCE; then
	header_define HAVE_ASPRINTF
else
	makefile_append SRCS compat/asprintf.c
fi

if check_function err 'err(0, "")' err.h; then
	header_define HAVE_ERR
else
	makefile_append SRCS compat/err.c
fi

if check_function fgetln "fgetln(NULL, NULL)" stdio.h; then
	header_define HAVE_FGETLN
else
	makefile_append SRCS compat/fgetln.c
fi

if check_function resizeterm "resizeterm(0, 0)" curses.h "" -lcurses; then
	header_define HAVE_RESIZETERM
fi

if check_function strcasestr "strcasestr(NULL, NULL)" string.h; then
	header_define HAVE_STRCASESTR
else
	makefile_append SRCS compat/strcasestr.c
fi

if check_function strlcat "strlcat(NULL, NULL, 0)" string.h; then
	header_define HAVE_STRLCAT
else
	makefile_append SRCS compat/strlcat.c
fi

if check_function strlcpy "strlcpy(NULL, NULL, 0)" string.h; then
	header_define HAVE_STRLCPY
else
	makefile_append SRCS compat/strlcpy.c
fi

if check_function strsep "strsep(NULL, NULL)" string.h; then
	header_define HAVE_STRSEP
else
	makefile_append SRCS compat/strsep.c
fi

if check_function strtonum "strtonum(NULL, 0, 0, NULL)" stdlib.h; then
	header_define HAVE_STRTONUM
else
	makefile_append SRCS compat/strtonum.c
fi

if check_function swap16 "swap16(0)" sys/types.h; then
	header_define HAVE_OPENBSD_SWAP16
elif check_function "a NetBSD-like bswap16" "bswap16(0)" \
    "sys/types.h machine/bswap.h"; then
	header_define HAVE_NETBSD_BSWAP16
elif check_function "a FreeBSD-like bswap16" "bswap16(0)" sys/endian.h; then
	header_define HAVE_FREEBSD_BSWAP16
fi

if check_function use_default_colors "use_default_colors()" curses.h "" \
    -lcurses; then
	header_define HAVE_USE_DEFAULT_COLORS
fi

print_check "whether <sys/queue.h> is usable"
if [ "$(uname)" = OpenBSD ]; then
	print_result yes
	header_define HAVE_QUEUE_H
else
	print_result no
fi

print_check "whether <sys/tree.h> is usable"
if [ "$(uname)" = OpenBSD ]; then
	print_result yes
	header_define HAVE_TREE_H
else
	print_result no
fi

print_check "whether getopt() supports optreset"
if compile "" unistd.h "optreset = 1"; then
	print_result yes
	header_define HAVE_OPTRESET
else
	print_result no
	makefile_append SRCS compat/getopt.c
fi

print_check "whether dlopen() requires libdl"
if compile "" "dlfcn.h stddef.h" "dlopen(NULL, 0)"; then
	print_result no
elif compile "" "dlfcn.h stddef.h" "dlopen(NULL, 0)" -ldl; then
	print_result yes
	makefile_append LDFLAGS -ldl
else
	print_result no
	error "cannot determine how to use dlopen()"
fi

check_plugin_pkgconfig $enable_flac flac ip flac

check_plugin_pkgconfig $enable_mad mad ip "mad id3tag"

if check_plugin_pkgconfig $enable_sndfile sndfile ip sndfile; then
	if pkg-config --atleast-version 1.0.23 sndfile; then
		header_define HAVE_SF_STR_GENRE
		header_define HAVE_SF_STR_TRACKNUMBER
	fi
fi

check_plugin_pkgconfig $enable_vorbis vorbis ip vorbisfile

check_plugin_pkgconfig $enable_wavpack wavpack ip wavpack

if check_plugin_pkgconfig $enable_ao ao op ao; then
	if pkg-config --atleast-version 1.0.0 ao; then
		header_define HAVE_AO_MATRIX
	fi
fi

if [ "$enable_oss" != no ]; then
	# Check for <soundcard.h> first, then for <sys/soundcard.h>.
	if ! check_header soundcard.h; then
		if check_header sys/soundcard.h; then
			header_define HAVE_SYS_SOUNDCARD_H
		else
			enable_oss=no
		fi
	fi

	if [ "$enable_oss" != no ]; then
		makefile_append OP oss
		if check_library ossaudio; then
			makefile_append LDFLAGS_oss -lossaudio
		fi
		enabled_ops="$enabled_ops oss"
	fi
fi

check_plugin_pkgconfig $enable_pulse pulse op libpulse-simple

if [ "$enable_sndio" != no ] && check_header sndio.h; then
	makefile_append OP sndio
	makefile_assign LDFLAGS_sndio -lsndio
	enabled_ops="$enabled_ops sndio"
fi

if [ "$enable_sun" != no ]; then
	# Check for <sys/audioio.h> (NetBSD and OpenBSD) first, then for
	# <sys/audio.h> (Solaris).
	if ! check_header sys/audioio.h sys/types.h; then
		if check_header sys/audio.h; then
			header_define HAVE_SYS_AUDIO_H
		else
			enable_sun=no
		fi
	fi

	if [ "$enable_sun" != no ]; then
		makefile_append OP sun
		enabled_ops="$enabled_ops sun"
	fi
fi

echo
echo "bindir:          $bindir"
echo "mandir:          $mandir"
echo "plugindir:       $plugindir"
echo "debug build:     $enable_debug"
echo "input plug-ins:  ${enabled_ips# }"
echo "output plug-ins: ${enabled_ops# }"
